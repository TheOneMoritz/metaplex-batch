"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LedgerProvider = exports.LedgerWalletAdapter = void 0;
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const hw_transport_webusb_1 = __importDefault(require("@ledgerhq/hw-transport-webusb"));
const core_1 = require("./core");
class LedgerWalletAdapter extends eventemitter3_1.default {
    constructor() {
        super();
        this._connecting = false;
        this._publicKey = null;
        this._transport = null;
    }
    get publicKey() {
        return this._publicKey;
    }
    async signTransaction(transaction) {
        if (!this._transport || !this._publicKey) {
            throw new Error('Not connected to Ledger');
        }
        // @TODO: account selection (derivation path changes with account)
        const signature = await core_1.signTransaction(this._transport, transaction);
        transaction.addSignature(this._publicKey, signature);
        return transaction;
    }
    async signAllTransactions(transactions) {
        return transactions;
    }
    async connect() {
        if (this._connecting) {
            return;
        }
        this._connecting = true;
        try {
            // @TODO: transport selection (WebUSB, WebHID, bluetooth, ...)
            this._transport = await hw_transport_webusb_1.default.create();
            // @TODO: account selection
            this._publicKey = await core_1.getPublicKey(this._transport);
            this.emit('connect', this._publicKey);
        }
        catch (error) {
            await this.disconnect();
            throw error;
        }
        finally {
            this._connecting = false;
        }
    }
    async disconnect() {
        let emit = false;
        if (this._transport) {
            await this._transport.close();
            this._transport = null;
            emit = true;
        }
        this._connecting = false;
        this._publicKey = null;
        if (emit) {
            this.emit('disconnect');
        }
    }
}
exports.LedgerWalletAdapter = LedgerWalletAdapter;
const ASSETS_URL = 'https://raw.githubusercontent.com/solana-labs/oyster/main/assets/wallets/';
exports.LedgerProvider = {
    name: 'Ledger',
    url: 'https://www.ledger.com',
    icon: `${ASSETS_URL}ledger.svg`,
    adapter: new LedgerWalletAdapter(),
};
//# sourceMappingURL=index.js.map